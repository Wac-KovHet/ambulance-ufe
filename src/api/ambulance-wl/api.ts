/* tslint:disable */
/* eslint-disable */
/**
 * Ambulance Api
 * Ambulance management for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xkovhet@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AmbulanceRequest
 */
export interface AmbulanceRequest {
    /**
     * Name of ambulance
     * @type {string}
     * @memberof AmbulanceRequest
     */
    'name': string;
    /**
     * Location of ambulance
     * @type {string}
     * @memberof AmbulanceRequest
     */
    'location': string;
    /**
     * Contact for ambulance
     * @type {string}
     * @memberof AmbulanceRequest
     */
    'contact': string;
}
/**
 * 
 * @export
 * @interface AmbulanceResponse
 */
export interface AmbulanceResponse {
    /**
     * Unique id of the ambulance
     * @type {string}
     * @memberof AmbulanceResponse
     */
    'id': string;
    /**
     * Name of ambulance
     * @type {string}
     * @memberof AmbulanceResponse
     */
    'name': string;
    /**
     * Location of ambulance
     * @type {string}
     * @memberof AmbulanceResponse
     */
    'location': string;
    /**
     * Contact for ambulance
     * @type {string}
     * @memberof AmbulanceResponse
     */
    'contact': string;
    /**
     * Number of nurses
     * @type {number}
     * @memberof AmbulanceResponse
     */
    'nurseCount': number;
    /**
     * Number of doctors
     * @type {number}
     * @memberof AmbulanceResponse
     */
    'doctorCount': number;
    /**
     * Total wage of nurses
     * @type {number}
     * @memberof AmbulanceResponse
     */
    'nurseTotalWage': number;
    /**
     * Total wage of doctors
     * @type {number}
     * @memberof AmbulanceResponse
     */
    'doctorTotalWage': number;
}
/**
 * 
 * @export
 * @interface EmployeeRequest
 */
export interface EmployeeRequest {
    /**
     * Name of employee
     * @type {string}
     * @memberof EmployeeRequest
     */
    'name': string;
    /**
     * Surname of employee
     * @type {string}
     * @memberof EmployeeRequest
     */
    'surname': string;
    /**
     * Date of birth of employee
     * @type {string}
     * @memberof EmployeeRequest
     */
    'dateOfBirth': string;
    /**
     * Position of employee
     * @type {string}
     * @memberof EmployeeRequest
     */
    'position': string;
    /**
     * Wage
     * @type {number}
     * @memberof EmployeeRequest
     */
    'wage': number;
}
/**
 * 
 * @export
 * @interface EmployeeResponse
 */
export interface EmployeeResponse {
    /**
     * Unique id of the employee
     * @type {string}
     * @memberof EmployeeResponse
     */
    'id': string;
    /**
     * Name of employee
     * @type {string}
     * @memberof EmployeeResponse
     */
    'name': string;
    /**
     * Surname of employee
     * @type {string}
     * @memberof EmployeeResponse
     */
    'surname': string;
    /**
     * Date of birth of employee
     * @type {string}
     * @memberof EmployeeResponse
     */
    'dateOfBirth': string;
    /**
     * Position of employee
     * @type {string}
     * @memberof EmployeeResponse
     */
    'position': string;
    /**
     * Wage
     * @type {number}
     * @memberof EmployeeResponse
     */
    'wage': number;
}

/**
 * AmbulanceListApi - axios parameter creator
 * @export
 */
export const AmbulanceListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this method to store new ambulance.
         * @summary Saves new ambulance
         * @param {AmbulanceRequest} ambulanceRequest Ambulance request to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAmbulance: async (ambulanceRequest: AmbulanceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceRequest' is not null or undefined
            assertParamExists('createAmbulance', 'ambulanceRequest', ambulanceRequest)
            const localVarPath = `/ambulances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ambulanceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to delete the specific ambulance.
         * @summary Deletes specific ambulance
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAmbulance: async (ambulanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('deleteAmbulance', 'ambulanceId', ambulanceId)
            const localVarPath = `/ambulances/{ambulanceId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By using ambulanceId you can details of particular ambulance.
         * @summary Provides details about the ambulance
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAmbulance: async (ambulanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('getAmbulance', 'ambulanceId', ambulanceId)
            const localVarPath = `/ambulances/{ambulanceId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of ambulances
         * @summary Provides the ambulance list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAmbulanceList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ambulances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to update content of the ambulance.
         * @summary Updates specific ambulance
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {AmbulanceRequest} ambulanceRequest Ambulance request to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAmbulance: async (ambulanceId: string, ambulanceRequest: AmbulanceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('updateAmbulance', 'ambulanceId', ambulanceId)
            // verify required parameter 'ambulanceRequest' is not null or undefined
            assertParamExists('updateAmbulance', 'ambulanceRequest', ambulanceRequest)
            const localVarPath = `/ambulances/{ambulanceId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ambulanceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AmbulanceListApi - functional programming interface
 * @export
 */
export const AmbulanceListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AmbulanceListApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this method to store new ambulance.
         * @summary Saves new ambulance
         * @param {AmbulanceRequest} ambulanceRequest Ambulance request to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAmbulance(ambulanceRequest: AmbulanceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AmbulanceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAmbulance(ambulanceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to delete the specific ambulance.
         * @summary Deletes specific ambulance
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAmbulance(ambulanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAmbulance(ambulanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * By using ambulanceId you can details of particular ambulance.
         * @summary Provides details about the ambulance
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAmbulance(ambulanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AmbulanceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAmbulance(ambulanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get list of ambulances
         * @summary Provides the ambulance list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAmbulanceList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AmbulanceResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAmbulanceList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to update content of the ambulance.
         * @summary Updates specific ambulance
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {AmbulanceRequest} ambulanceRequest Ambulance request to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAmbulance(ambulanceId: string, ambulanceRequest: AmbulanceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AmbulanceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAmbulance(ambulanceId, ambulanceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AmbulanceListApi - factory interface
 * @export
 */
export const AmbulanceListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AmbulanceListApiFp(configuration)
    return {
        /**
         * Use this method to store new ambulance.
         * @summary Saves new ambulance
         * @param {AmbulanceRequest} ambulanceRequest Ambulance request to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAmbulance(ambulanceRequest: AmbulanceRequest, options?: any): AxiosPromise<AmbulanceResponse> {
            return localVarFp.createAmbulance(ambulanceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to delete the specific ambulance.
         * @summary Deletes specific ambulance
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAmbulance(ambulanceId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAmbulance(ambulanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * By using ambulanceId you can details of particular ambulance.
         * @summary Provides details about the ambulance
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAmbulance(ambulanceId: string, options?: any): AxiosPromise<AmbulanceResponse> {
            return localVarFp.getAmbulance(ambulanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of ambulances
         * @summary Provides the ambulance list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAmbulanceList(options?: any): AxiosPromise<Array<AmbulanceResponse>> {
            return localVarFp.getAmbulanceList(options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to update content of the ambulance.
         * @summary Updates specific ambulance
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {AmbulanceRequest} ambulanceRequest Ambulance request to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAmbulance(ambulanceId: string, ambulanceRequest: AmbulanceRequest, options?: any): AxiosPromise<AmbulanceResponse> {
            return localVarFp.updateAmbulance(ambulanceId, ambulanceRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AmbulanceListApi - interface
 * @export
 * @interface AmbulanceListApi
 */
export interface AmbulanceListApiInterface {
    /**
     * Use this method to store new ambulance.
     * @summary Saves new ambulance
     * @param {AmbulanceRequest} ambulanceRequest Ambulance request to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceListApiInterface
     */
    createAmbulance(ambulanceRequest: AmbulanceRequest, options?: AxiosRequestConfig): AxiosPromise<AmbulanceResponse>;

    /**
     * Use this method to delete the specific ambulance.
     * @summary Deletes specific ambulance
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceListApiInterface
     */
    deleteAmbulance(ambulanceId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * By using ambulanceId you can details of particular ambulance.
     * @summary Provides details about the ambulance
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceListApiInterface
     */
    getAmbulance(ambulanceId: string, options?: AxiosRequestConfig): AxiosPromise<AmbulanceResponse>;

    /**
     * Get list of ambulances
     * @summary Provides the ambulance list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceListApiInterface
     */
    getAmbulanceList(options?: AxiosRequestConfig): AxiosPromise<Array<AmbulanceResponse>>;

    /**
     * Use this method to update content of the ambulance.
     * @summary Updates specific ambulance
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {AmbulanceRequest} ambulanceRequest Ambulance request to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceListApiInterface
     */
    updateAmbulance(ambulanceId: string, ambulanceRequest: AmbulanceRequest, options?: AxiosRequestConfig): AxiosPromise<AmbulanceResponse>;

}

/**
 * AmbulanceListApi - object-oriented interface
 * @export
 * @class AmbulanceListApi
 * @extends {BaseAPI}
 */
export class AmbulanceListApi extends BaseAPI implements AmbulanceListApiInterface {
    /**
     * Use this method to store new ambulance.
     * @summary Saves new ambulance
     * @param {AmbulanceRequest} ambulanceRequest Ambulance request to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceListApi
     */
    public createAmbulance(ambulanceRequest: AmbulanceRequest, options?: AxiosRequestConfig) {
        return AmbulanceListApiFp(this.configuration).createAmbulance(ambulanceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to delete the specific ambulance.
     * @summary Deletes specific ambulance
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceListApi
     */
    public deleteAmbulance(ambulanceId: string, options?: AxiosRequestConfig) {
        return AmbulanceListApiFp(this.configuration).deleteAmbulance(ambulanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * By using ambulanceId you can details of particular ambulance.
     * @summary Provides details about the ambulance
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceListApi
     */
    public getAmbulance(ambulanceId: string, options?: AxiosRequestConfig) {
        return AmbulanceListApiFp(this.configuration).getAmbulance(ambulanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get list of ambulances
     * @summary Provides the ambulance list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceListApi
     */
    public getAmbulanceList(options?: AxiosRequestConfig) {
        return AmbulanceListApiFp(this.configuration).getAmbulanceList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to update content of the ambulance.
     * @summary Updates specific ambulance
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {AmbulanceRequest} ambulanceRequest Ambulance request to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceListApi
     */
    public updateAmbulance(ambulanceId: string, ambulanceRequest: AmbulanceRequest, options?: AxiosRequestConfig) {
        return AmbulanceListApiFp(this.configuration).updateAmbulance(ambulanceId, ambulanceRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EmployeeListApi - axios parameter creator
 * @export
 */
export const EmployeeListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this method to store new employee.
         * @summary Saves new employee
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {EmployeeRequest} employeeRequest Employee request to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployee: async (ambulanceId: string, employeeRequest: EmployeeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('createEmployee', 'ambulanceId', ambulanceId)
            // verify required parameter 'employeeRequest' is not null or undefined
            assertParamExists('createEmployee', 'employeeRequest', employeeRequest)
            const localVarPath = `/ambulances/{ambulanceId}/employees`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(employeeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to delete the specific employee.
         * @summary Deletes specific employee
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} employeeId pass the id of the particular employee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmployee: async (ambulanceId: string, employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('deleteEmployee', 'ambulanceId', ambulanceId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('deleteEmployee', 'employeeId', employeeId)
            const localVarPath = `/ambulances/{ambulanceId}/employees/{employeeId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By using ambulanceId and employeeId you can details of particular employee.
         * @summary Provides details about the employee
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} employeeId pass the id of the particular employee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployee: async (ambulanceId: string, employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('getEmployee', 'ambulanceId', ambulanceId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getEmployee', 'employeeId', employeeId)
            const localVarPath = `/ambulances/{ambulanceId}/employees/{employeeId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By using ambulanceId you can get employee list.
         * @summary Provides details the ambulance employee list
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeList: async (ambulanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('getEmployeeList', 'ambulanceId', ambulanceId)
            const localVarPath = `/ambulances/{ambulanceId}/employees`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to update employee.
         * @summary Updates specific employee
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} employeeId pass the id of the particular employee
         * @param {EmployeeRequest} employeeRequest Employee request to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployee: async (ambulanceId: string, employeeId: string, employeeRequest: EmployeeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('updateEmployee', 'ambulanceId', ambulanceId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updateEmployee', 'employeeId', employeeId)
            // verify required parameter 'employeeRequest' is not null or undefined
            assertParamExists('updateEmployee', 'employeeRequest', employeeRequest)
            const localVarPath = `/ambulances/{ambulanceId}/employees/{employeeId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(employeeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeListApi - functional programming interface
 * @export
 */
export const EmployeeListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeListApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this method to store new employee.
         * @summary Saves new employee
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {EmployeeRequest} employeeRequest Employee request to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmployee(ambulanceId: string, employeeRequest: EmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmployee(ambulanceId, employeeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to delete the specific employee.
         * @summary Deletes specific employee
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} employeeId pass the id of the particular employee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEmployee(ambulanceId: string, employeeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEmployee(ambulanceId, employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * By using ambulanceId and employeeId you can details of particular employee.
         * @summary Provides details about the employee
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} employeeId pass the id of the particular employee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployee(ambulanceId: string, employeeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployee(ambulanceId, employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * By using ambulanceId you can get employee list.
         * @summary Provides details the ambulance employee list
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeeList(ambulanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmployeeResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeList(ambulanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to update employee.
         * @summary Updates specific employee
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} employeeId pass the id of the particular employee
         * @param {EmployeeRequest} employeeRequest Employee request to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmployee(ambulanceId: string, employeeId: string, employeeRequest: EmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmployee(ambulanceId, employeeId, employeeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeListApi - factory interface
 * @export
 */
export const EmployeeListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeListApiFp(configuration)
    return {
        /**
         * Use this method to store new employee.
         * @summary Saves new employee
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {EmployeeRequest} employeeRequest Employee request to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployee(ambulanceId: string, employeeRequest: EmployeeRequest, options?: any): AxiosPromise<EmployeeResponse> {
            return localVarFp.createEmployee(ambulanceId, employeeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to delete the specific employee.
         * @summary Deletes specific employee
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} employeeId pass the id of the particular employee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmployee(ambulanceId: string, employeeId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteEmployee(ambulanceId, employeeId, options).then((request) => request(axios, basePath));
        },
        /**
         * By using ambulanceId and employeeId you can details of particular employee.
         * @summary Provides details about the employee
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} employeeId pass the id of the particular employee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployee(ambulanceId: string, employeeId: string, options?: any): AxiosPromise<EmployeeResponse> {
            return localVarFp.getEmployee(ambulanceId, employeeId, options).then((request) => request(axios, basePath));
        },
        /**
         * By using ambulanceId you can get employee list.
         * @summary Provides details the ambulance employee list
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeList(ambulanceId: string, options?: any): AxiosPromise<Array<EmployeeResponse>> {
            return localVarFp.getEmployeeList(ambulanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to update employee.
         * @summary Updates specific employee
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} employeeId pass the id of the particular employee
         * @param {EmployeeRequest} employeeRequest Employee request to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployee(ambulanceId: string, employeeId: string, employeeRequest: EmployeeRequest, options?: any): AxiosPromise<EmployeeResponse> {
            return localVarFp.updateEmployee(ambulanceId, employeeId, employeeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmployeeListApi - interface
 * @export
 * @interface EmployeeListApi
 */
export interface EmployeeListApiInterface {
    /**
     * Use this method to store new employee.
     * @summary Saves new employee
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {EmployeeRequest} employeeRequest Employee request to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeListApiInterface
     */
    createEmployee(ambulanceId: string, employeeRequest: EmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeResponse>;

    /**
     * Use this method to delete the specific employee.
     * @summary Deletes specific employee
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} employeeId pass the id of the particular employee
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeListApiInterface
     */
    deleteEmployee(ambulanceId: string, employeeId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * By using ambulanceId and employeeId you can details of particular employee.
     * @summary Provides details about the employee
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} employeeId pass the id of the particular employee
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeListApiInterface
     */
    getEmployee(ambulanceId: string, employeeId: string, options?: AxiosRequestConfig): AxiosPromise<EmployeeResponse>;

    /**
     * By using ambulanceId you can get employee list.
     * @summary Provides details the ambulance employee list
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeListApiInterface
     */
    getEmployeeList(ambulanceId: string, options?: AxiosRequestConfig): AxiosPromise<Array<EmployeeResponse>>;

    /**
     * Use this method to update employee.
     * @summary Updates specific employee
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} employeeId pass the id of the particular employee
     * @param {EmployeeRequest} employeeRequest Employee request to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeListApiInterface
     */
    updateEmployee(ambulanceId: string, employeeId: string, employeeRequest: EmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeResponse>;

}

/**
 * EmployeeListApi - object-oriented interface
 * @export
 * @class EmployeeListApi
 * @extends {BaseAPI}
 */
export class EmployeeListApi extends BaseAPI implements EmployeeListApiInterface {
    /**
     * Use this method to store new employee.
     * @summary Saves new employee
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {EmployeeRequest} employeeRequest Employee request to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeListApi
     */
    public createEmployee(ambulanceId: string, employeeRequest: EmployeeRequest, options?: AxiosRequestConfig) {
        return EmployeeListApiFp(this.configuration).createEmployee(ambulanceId, employeeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to delete the specific employee.
     * @summary Deletes specific employee
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} employeeId pass the id of the particular employee
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeListApi
     */
    public deleteEmployee(ambulanceId: string, employeeId: string, options?: AxiosRequestConfig) {
        return EmployeeListApiFp(this.configuration).deleteEmployee(ambulanceId, employeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * By using ambulanceId and employeeId you can details of particular employee.
     * @summary Provides details about the employee
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} employeeId pass the id of the particular employee
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeListApi
     */
    public getEmployee(ambulanceId: string, employeeId: string, options?: AxiosRequestConfig) {
        return EmployeeListApiFp(this.configuration).getEmployee(ambulanceId, employeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * By using ambulanceId you can get employee list.
     * @summary Provides details the ambulance employee list
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeListApi
     */
    public getEmployeeList(ambulanceId: string, options?: AxiosRequestConfig) {
        return EmployeeListApiFp(this.configuration).getEmployeeList(ambulanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to update employee.
     * @summary Updates specific employee
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} employeeId pass the id of the particular employee
     * @param {EmployeeRequest} employeeRequest Employee request to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeListApi
     */
    public updateEmployee(ambulanceId: string, employeeId: string, employeeRequest: EmployeeRequest, options?: AxiosRequestConfig) {
        return EmployeeListApiFp(this.configuration).updateEmployee(ambulanceId, employeeId, employeeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


